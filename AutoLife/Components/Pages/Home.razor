@page "/"
@using AutoLife.Components.Modules
@using AutoLife.Data.Repositories
@using AutoLife.Domain.Models
@using AutoLife.Lib.Interfaces
@using AutoLife.Lib.Services
@using System.Globalization
@rendermode InteractiveServer

<div class="d-flex flex-column vh-100 vw-100 overflow-hidden" style="max-width:1500px;">

    <main class="h-50 d-flex flex-column w-100 align-items-center">
        <header class="d-flex justify-content-start text-white-50 mt-4 mx-3">
            <h6 class="mb-0">
                @_selectedDay.ToString("dddd, dd MMMM yyyy", new CultureInfo("sv-SE"))
            </h6>
        </header>

        <div class="d-flex align-items-center h-100 w-100 justify-content-between">
            <button class="btn d-flex justify-content-center text-white-50"
            style="width:50px; min-width:50px;"
            @onclick="() => ChangeDay(-1)"
            aria-label="Previous day"
            title="Previous day">
                <i class="bi bi-chevron-left" />
            </button>

            <div class="d-flex flex-grow-1 gap-2 px-2">
                @for (int i = 0; i < UserStateService.UserProfiles.Count; i++)
                {
                    var profile = UserStateService.UserProfiles[i];
                    var todosForDay = GetTodosForDay(profile, _selectedDay);
                    var completedCount = todosForDay.Count(t => t.IsCompleted);
                    var totalCount = todosForDay.Count;

                    <div class="card @(profile.Selected ? "border-primary flex-grow-1 selected" : "opacity-75")"
                    @onclick="@(() => SelectProfile(profile))"
                    style="cursor:pointer; transition: all 0.3s ease;"
                    role="button"
                    tabindex="0"
                    @onkeypress="@((e) => { if (e.Key == "Enter" || e.Key == " ") SelectProfile(profile); })">

                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="profile-name">
                                @if (profile.Selected)
                                {
                                    @profile.Name
                                }
                                else
                                {
                                    @profile?.Name?[0]
                                }
                            </span>

                            @if (profile.Selected && totalCount > 0)
                            {
                                <small class="badge bg-@(completedCount == totalCount ? "success" : "secondary")">
                                    @completedCount/@totalCount
                                </small>
                            }
                        </div>

                        @if (profile.Selected)
                        {
                            <div class="card-body overflow-auto">
                                @if (todosForDay.Any())
                                {
                                    @for (int j = 0; j < todosForDay.Count; j++)
                                    {
                                        var todo = todosForDay[j];
                                        var inputId = $"user{i}td{j}";

                                        <div class="input-group d-flex align-items-center gap-2 mb-2">
                                            <div class="form-check d-flex align-items-center">
                                                <InputCheckbox id="@inputId" class="form-check-input"
                                                @bind-Value="todo.IsCompleted" @onclick="@(() => OnTodoToggled(todo))" />
                                                <label class="form-check-label ms-2 @(todo.IsCompleted ? "text-decoration-line-through text-muted" : "")"
                                                for="@inputId">
                                                    @todo.Title
                                                </label>
                                            </div>
                                            @if (!string.IsNullOrEmpty(todo.Description))
                                            {
                                                <small class="text-muted d-block">@todo.Description</small>
                                            }
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-muted text-center py-3">
                                        <i class="bi bi-check-circle"></i>
                                        <p class="mt-2 mb-0">No todo's today</p>
                                    </div>
                                }

                                @if (AddNewTodoClicked)
                                {
                                    <div class="mt-3">
                                        <InputText @bind-Value="NewTodoTitle" placeholder="New todo..." class="form-control" />
                                        <InputTextArea @bind-Value="NewTodoDescription" placeholder="Description (optional)" class="form-control mt-2" />
                                        <button class="btn btn-secondary mt-2" @onclick="() => AddNewTodoClicked = false">
                                            Cancel
                                        </button>
                                        <button class="btn btn-success mt-2" @onclick="AddNewTodo">
                                            Save
                                            <i class="bi bi-floppy"></i>
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <button class="mt-4 btn btn-primary btn-success" @onclick="NewTodoClicked"> + Add todo </button>
                                }

                            </div>
                        }
                    </div>
                }
            </div>

            <button class="btn d-flex justify-content-center text-white-50 hover-scale"
            style="width:50px; min-width:50px;"
            @onclick="() => ChangeDay(1)"
            aria-label="Next day"
            title="Next day">
                <i class="bi bi-chevron-right" />
            </button>
        </div>
    </main>

    <div class="fixed-bottom d-flex align-items-end justify-content-center">
        @if (ToDoItemService.WeeklyPlan != null)
        {
            <div class="d-flex flex-column w-100">
                <h5 class="text-white-50 mx-2 opacity-25"> This week </h5>
                <div class="d-flex justif gap-1">
                    @for (int i = 0; i < 7; i++)
                    {
                        var date = startOfWeek.AddDays(i);
                        var isSelected = date.Day == _selectedDay.Day && date.Month == _selectedDay.Month;
                        var isToday = date.Date == DateTime.Today;
                        var label = isSelected ? date.ToString("dddd") : date.ToString("ddd").Substring(0, 1).ToUpper();
                        var dayItems = ToDoItemService.WeeklyPlan.Where(item => item.Date.Date == date.Date).OrderBy(item => item.Date).ToList();

                        <div class="card @(isSelected ? "flex-grow-1 selected" : "opacity-50") @(isToday ? "border-warning" : "")"
                        style="cursor: pointer; transition: all 0.3s ease;"
                        @onclick="@(() => SelectDay(date))"
                        role="button"
                        tabindex="0"
                        @onkeypress="@((e) => { if (e.Key == "Enter" || e.Key == " ") SelectDay(date); })">

                            <div class="card-header text-center position-relative">
                                @label
                                @if (isToday)
                                {
                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-warning">
                                        <span class="visually-hidden">Today</span>
                                    </span>
                                }
                            </div>

                            <div class="card-body overflow-hidden p-2">
                                @if (dayItems.Any())
                                {
                                    @foreach (var item in dayItems.Take(3))
                                    {
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <span class="text-truncate @(item.IsCompleted ? " text-decoration-line-through text-muted small" : "")" title="@item.Title">@item.Title (@item.AssignedPerson.Name)</span>
                                            <small class=" @(item.IsCompleted ? " text-decoration-line-through text-muted small" : "")">@item.Date.ToString("HH:mm")</small>
                                        </div>
                                    }
                                    @if (dayItems.Count > 3)
                                    {
                                        <small class="text-muted">+@(dayItems.Count - 3) to...</small>
                                    }
                                }
                                else
                                {
                                    <div class="text-center text-muted">
                                        <small>No activities</small>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <h4 class="w-100 h-100 d-flex justify-content-center align-items-center text-white-50 opacity-50">Loading weekly plan...</h4>
        }
    </div>
</div>

@code {
    private DateTime _selectedDay = DateTime.UtcNow;

    DateTime now = DateTime.UtcNow;
    DateTime startOfWeek => now.Date.AddDays(-(now.DayOfWeek == DayOfWeek.Sunday ? 6 : now.DayOfWeek - DayOfWeek.Monday));
    DateTime endOfWeek => startOfWeek.AddDays(6).AddHours(23).AddMinutes(59).AddSeconds(59);

    private bool AddNewTodoClicked = false;
    private string NewTodoTitle = string.Empty;
    private string NewTodoDescription = string.Empty;

    [Inject] IRepository<UserProfile> UserProfileRepository { get; set; } = default!;
    [Inject] ToDoItemService ToDoItemService { get; set; } = default!;
    [Inject] UserStateService UserStateService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (UserStateService.UserProfiles.Count > 0)
        {
            UserStateService.UserProfiles[0].Selected = true;
        }

        await ToDoItemService.LoadAllTodosAsync();
        await Task.Delay(3000);
        StateHasChanged();
    }

    private void SelectProfile(UserProfile selected)
    {
        if (selected == null) return;

        foreach (var user in UserStateService.UserProfiles)
        {
            user.Selected = false;
        }

        selected.Selected = true;
        StateHasChanged();
    }

    private void ChangeDay(int daysToAdd)
    {
        _selectedDay = _selectedDay.AddDays(daysToAdd);
        StateHasChanged();
    }

    private void SelectDay(DateTime day)
    {
        _selectedDay = day.Date; 
        StateHasChanged();
    }

    private async Task OnTodoToggled(ToDoItem todo)
    {
        todo.IsCompleted = !todo.IsCompleted;
        await ToDoItemService.UpdateTodoItemAync(todo);
        var updatedItem = ToDoItemService.WeeklyPlan.FirstOrDefault(item => item.Id == todo.Id);
        if (updatedItem != null)
        {
            updatedItem.IsCompleted = todo.IsCompleted;
        }

        StateHasChanged();
    }

    private List<ToDoItem> GetTodosForDay(UserProfile profile, DateTime day)
    {
        if (profile?.ToDoList == null) return new List<ToDoItem>();

        return profile.ToDoList
            .Where(todo => todo.Date.Date == day.Date)
            .OrderBy(todo => todo.Date)
            .ToList();
    }

    private void NewTodoClicked()
    {
        AddNewTodoClicked = !AddNewTodoClicked;
        StateHasChanged();
    }

    private async Task AddNewTodo()
    {
        if (string.IsNullOrWhiteSpace(NewTodoTitle)) return;

        var selectedProfile = UserStateService.UserProfiles.FirstOrDefault(p => p.Selected);
        var newTodo = new ToDoItem
            {
                Title = NewTodoTitle,
                AssignedPersonId = selectedProfile.Id,
                Description = NewTodoDescription,
                Date = _selectedDay,
                IsCompleted = false
            };

        await ToDoItemService.CreateNewTodoAsync(newTodo);
        UserStateService.AddTodoToUser(selectedProfile, newTodo);
        NewTodoTitle = string.Empty;
        NewTodoDescription = string.Empty;
        AddNewTodoClicked = false;
        StateHasChanged();
    }
}